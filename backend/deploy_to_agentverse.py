#!/usr/bin/env python3
"""
Deploy Fetch.ai Agents to Agentverse
This script deploys all agents with chat protocol to Agentverse
"""

import os
import sys
import time
import subprocess
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def check_environment():
    """Check if all required environment variables are set"""
    required_vars = ['SUPABASE_URL', 'SUPABASE_KEY', 'GEMINI_API_KEY']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"❌ Missing environment variables: {', '.join(missing_vars)}")
        print("Please set them in your .env file")
        return False
    
    print("✅ Environment variables configured")
    return True

def deploy_storage_agent():
    """Deploy Storage Agent to Agentverse"""
    print("\n🚀 Deploying Storage Agent...")
    
    try:
        # Import and run storage agent
        from storage_agent import storage_agent
        
        print(f"📍 Storage Agent Address: {storage_agent.address}")
        print(f"🌐 Storage Agent Endpoint: http://0.0.0.0:8001/submit")
        print("✅ Storage Agent deployed successfully!")
        
        return storage_agent.address
        
    except Exception as e:
        print(f"❌ Failed to deploy Storage Agent: {e}")
        return None

def deploy_analysis_agent():
    """Deploy Analysis Agent to Agentverse"""
    print("\n🚀 Deploying Analysis Agent...")
    
    try:
        # Import and run analysis agent
        from test import analysis_agent
        
        print(f"📍 Analysis Agent Address: {analysis_agent.address}")
        print(f"🌐 Analysis Agent Endpoint: http://0.0.0.0:8000/submit")
        print("✅ Analysis Agent deployed successfully!")
        
        return analysis_agent.address
        
    except Exception as e:
        print(f"❌ Failed to deploy Analysis Agent: {e}")
        return None

def deploy_nutrition_agent():
    """Deploy Nutrition Analysis Agent to Agentverse"""
    print("\n🚀 Deploying Nutrition Analysis Agent...")
    
    try:
        # Import and run nutrition analysis agent
        from nutrition_analysis_agent import analysis_agent
        
        print(f"📍 Nutrition Analysis Agent Address: {analysis_agent.address}")
        print(f"🌐 Nutrition Analysis Agent Endpoint: http://0.0.0.0:8003/submit")
        print("✅ Nutrition Analysis Agent deployed successfully!")
        
        return analysis_agent.address
        
    except Exception as e:
        print(f"❌ Failed to deploy Nutrition Analysis Agent: {e}")
        return None

def update_spectacles_config(storage_address, analysis_address, nutrition_address):
    """Update Spectacles configuration with agent addresses"""
    print("\n📱 Updating Spectacles Configuration...")
    
    config_content = f"""# Fetch.ai Agent Addresses for Spectacles Integration
# Generated by deploy_to_agentverse.py

STORAGE_AGENT_ADDRESS = "{storage_address}"
ANALYSIS_AGENT_ADDRESS = "{analysis_address}"
NUTRITION_ANALYSIS_AGENT_ADDRESS = "{nutrition_address}"

# Update these in your Spectacles FetchAIAgent.ts:
# this.storageAgentAddress = "{storage_address}";
"""
    
    with open('agent_addresses.txt', 'w') as f:
        f.write(config_content)
    
    print("✅ Agent addresses saved to agent_addresses.txt")
    print("📝 Update your Spectacles FetchAIAgent.ts with these addresses")

def main():
    """Main deployment function"""
    print("🚀 Fetch.ai Agentverse Deployment")
    print("=" * 50)
    
    if not check_environment():
        return
    
    print("\n📋 Deploying agents with chat protocol...")
    
    # Deploy all agents
    storage_address = deploy_storage_agent()
    analysis_address = deploy_analysis_agent()
    nutrition_address = deploy_nutrition_agent()
    
    if storage_address and analysis_address and nutrition_address:
        print("\n🎉 All agents deployed successfully!")
        
        # Update Spectacles configuration
        update_spectacles_config(storage_address, analysis_address, nutrition_address)
        
        print("\n📋 Next Steps:")
        print("1. Update Spectacles FetchAIAgent.ts with the agent addresses")
        print("2. Test the agents using the Agentverse web interface")
        print("3. Run the frontend web app: python nutrition_frontend.py")
        
        print("\n🔗 Agentverse URLs:")
        print(f"Storage Agent: https://agentverse.ai/agents/{storage_address}")
        print(f"Analysis Agent: https://agentverse.ai/agents/{analysis_address}")
        print(f"Nutrition Agent: https://agentverse.ai/agents/{nutrition_address}")
        
    else:
        print("\n❌ Some agents failed to deploy")
        print("Check the error messages above")

if __name__ == "__main__":
    main()
