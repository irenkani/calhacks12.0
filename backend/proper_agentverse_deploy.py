#!/usr/bin/env python3
"""
Proper Agentverse Deployment Script
This script properly registers agents on Agentverse using the correct method
"""

import os
import sys
import time
import asyncio
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def check_environment():
    """Check if all required environment variables are set"""
    required_vars = ['SUPABASE_URL', 'SUPABASE_KEY', 'GEMINI_API_KEY']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"❌ Missing environment variables: {', '.join(missing_vars)}")
        print("Please set them in your .env file")
        return False
    
    print("✅ Environment variables configured")
    return True

async def register_agent_on_agentverse(agent, agent_name):
    """Register a single agent on Agentverse"""
    print(f"\n🚀 Registering {agent_name} on Agentverse...")
    
    try:
        # Register the agent
        await agent.register()
        
        print(f"✅ {agent_name} registered successfully!")
        print(f"📍 Agent Address: {agent.address}")
        print(f"🌐 Agentverse URL: https://agentverse.ai/agents/{agent.address}")
        
        return agent.address
        
    except Exception as e:
        print(f"❌ Failed to register {agent_name}: {e}")
        return None

async def deploy_all_agents():
    """Deploy all agents to Agentverse"""
    print("🚀 Deploying all agents to Agentverse...")
    print("=" * 50)
    
    addresses = {}
    
    try:
        # Import agents
        from storage_agent import storage_agent
        from test import analysis_agent
        from nutrition_analysis_agent import analysis_agent as nutrition_agent
        
        print("✅ All agents imported successfully")
        
        # Register each agent
        addresses['storage'] = await register_agent_on_agentverse(storage_agent, "Storage Agent")
        addresses['analysis'] = await register_agent_on_agentverse(analysis_agent, "Analysis Agent")
        addresses['nutrition'] = await register_agent_on_agentverse(nutrition_agent, "Nutrition Analysis Agent")
        
        return addresses
        
    except Exception as e:
        print(f"❌ Deployment failed: {e}")
        import traceback
        traceback.print_exc()
        return None

def save_agent_addresses(addresses):
    """Save agent addresses to file"""
    if not addresses:
        return
    
    config_content = f"""# Fetch.ai Agent Addresses for Agentverse
# Generated by proper_agentverse_deploy.py

STORAGE_AGENT_ADDRESS = "{addresses.get('storage', 'NOT_DEPLOYED')}"
ANALYSIS_AGENT_ADDRESS = "{addresses.get('analysis', 'NOT_DEPLOYED')}"
NUTRITION_ANALYSIS_AGENT_ADDRESS = "{addresses.get('nutrition', 'NOT_DEPLOYED')}"

# Agentverse URLs:
STORAGE_AGENT_URL = "https://agentverse.ai/agents/{addresses.get('storage', 'NOT_DEPLOYED')}"
ANALYSIS_AGENT_URL = "https://agentverse.ai/agents/{addresses.get('analysis', 'NOT_DEPLOYED')}"
NUTRITION_AGENT_URL = "https://agentverse.ai/agents/{addresses.get('nutrition', 'NOT_DEPLOYED')}"

# Update Spectacles FetchAIAgent.ts:
# this.storageAgentAddress = "{addresses.get('storage', 'NOT_DEPLOYED')}";
"""
    
    with open('agentverse_addresses.txt', 'w') as f:
        f.write(config_content)
    
    print("✅ Agent addresses saved to agentverse_addresses.txt")

def main():
    """Main deployment function"""
    print("🚀 Proper Agentverse Deployment")
    print("=" * 50)
    
    if not check_environment():
        return
    
    print("\n📋 This will register agents on Agentverse...")
    print("⚠️  Make sure you have internet connectivity")
    
    try:
        # Run async deployment
        addresses = asyncio.run(deploy_all_agents())
        
        if addresses and all(addresses.values()):
            print("\n🎉 All agents deployed successfully!")
            
            # Save addresses
            save_agent_addresses(addresses)
            
            print("\n📋 Next Steps:")
            print("1. Check the Agentverse URLs above to verify agents are visible")
            print("2. Update Spectacles FetchAIAgent.ts with the storage agent address")
            print("3. Test the agents using the Agentverse web interface")
            
            print("\n🔗 Agentverse URLs:")
            for name, address in addresses.items():
                print(f"{name.title()} Agent: https://agentverse.ai/agents/{address}")
                
        else:
            print("\n❌ Some agents failed to deploy")
            print("Check the error messages above")
            
    except Exception as e:
        print(f"❌ Deployment failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
